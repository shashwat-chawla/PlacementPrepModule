class Solution {
public:
    void comb(int ind,int target,vector<int> &candidates,vector<vector<int>> &ans,vector<int> &ds)
    {
          if(target==0)
        {
            ans.push_back(ds);
             return;
        } 
          for(int i=ind;i<candidates.size();i++)
        { 
              if(i>ind && candidates[i]==candidates[i-1])continue;
                if(candidates[i]>target)break;
               ds.push_back(candidates[i]);
            comb(i+1,target-candidates[i],candidates,ans,ds);
            ds.pop_back();//in backtrack pop the value so tht not pick up can run
        }
       
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
       
         sort(candidates.begin(),candidates.end());
         vector< vector<int>> ans;
        vector<int> ds;
        comb(0,target,candidates,ans,ds);
       
       // vector<vector<int>> ans1;
       //  for(int i=0;i<ans.size()-1;i++)
       //  {
       //      if(ans[i]!=ans[i+1])
       //      {
       //          ans1.push_back(ans[i]);
       //      }
       //  }
        return ans;
        
    }
};
