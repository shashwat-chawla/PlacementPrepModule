impl Solution {
    fn fact(n: usize) -> usize{
        if n <= 1 {
            return 1;
        }
        let mut value = 1;
        for i in 2..=n{
            value*=i;
        }
        return value;
    }

    fn dfs( choice : Vec<usize>, index: usize) -> String{

        if choice.is_empty() {
            return String::from("");
        }

        if index == 0 {
            return choice.into_iter().map(|x| x.to_string()).collect::<String>();
        }

        let mut choice = choice;
        let group_size = Solution::fact(choice.len() - 1);
        let group_index = index / group_size;
        let subgroup_index = index % group_size;

        let left = choice.remove(group_index).to_string();
        let right = Solution::dfs(choice,subgroup_index);

        return [left, right].join("");

    }

    pub fn get_permutation(n: i32, k: i32) -> String{
        let n = n as usize;
        let k = k as usize;
        let mut choice = (1..=n).collect::<Vec<usize>>();
        return Solution::dfs(choice, k - 1);
    }
}
