class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        // if nums = [1, 2, 3], we can think this array as a number 123
        // what we want is to find the next larger number of 123
        // we can see that it's 132, and next larger number of 132 is 213
        // so we have a sequence: 123->132->213->231->312->321
        // and the next larger number for the largest number is the smallest so 321->123
        // with this observation, let's find next permutation for nums [1, 3, 2, 5, 3, 3, 2, 1]
        // we can see that the permutation [5, 3, 3, 2, 1] is already the largest, its next permutation is the smallest, won't make the nums larger
        // so let's extend our range a little bit, let's see the permutation [2, 5, 3, 3, 2, 1]
        // it's not the largest so it's possible to find a permutation that's larger than it
        // to make the first number 2 larger, we exchange it with number 3. We won't change it with 5 because it would make the permutation too large.
        // but we have two 3s in the permutation, we will choose the last one to exchange with 2
        // becuase in this way we can keep the permutation start from 5 still be the largest
        // why we'll keep it largest? Becuase the next permutation of the largest is the smallest
        // we have already known that the next permutation of [2, 5, 3, 3, 2, 1] would start with 3
        // so what we want to get is the smallest number starting with 3
        // and we can observe that the reverse of the largest permutation is the smallest one
        // so after swaping 2 with 3 we get [3, 5, 3, 2, 2, 1], then we will do a reverse to the permutation [5, 3, 2, 2, 1], in this way we get [3, 1, 2, 2, 3, 5], and it's the next permutation of [2, 5, 3, 3, 2, 1]
        // so the next permutation of [1, 3, 2, 5, 3, 3, 2, 1] is [1, 3, 3, 1, 2, 2, 3, 5]
        int size = nums.size();
        // find the first number from the back of the nums, that is smaller than the number after it
        int index = size - 2;
        for (; index >= 0; index--) {
            if (nums[index] < nums[index + 1]) {
                break;
            }
        }
        // if we can't find it, the permuation is the largest, the result becomes the reverse of it
        if (index < 0) {
            reverse(nums, 0, size - 1);
            return;
        }
        // find the first number from the back of nums, that is greater than nums[smallIndex]
        int smallIndex = index;
        index = size - 1;
        for (; index > smallIndex; index--) {
            if (nums[index] > nums[smallIndex]) {
                break;
            }
        }
        // exchange two numbers and reverse the rest of the permutation
        swap(nums[smallIndex], nums[index]);
        reverse(nums, smallIndex + 1, size - 1);
    }
    
    // the question requires in place replacecment and use constant extra memory
    void reverse(vector<int>& nums, int start, int end) {
        while (start < end) {
            swap(nums[start], nums[end]);
            start++;
            end--;
        }
    
        
    }
};
